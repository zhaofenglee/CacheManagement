@page "/cache-management"
@using Blazorise.TreeView
@using JS.Abp.CacheManagement.CacheItems
@using JS.Abp.CacheManagement.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.AspNetCore.Components.Messages

@inherits CacheManagementComponentBase
@inject ICacheItemAppService CacheItemAppService
@inject IUiMessageService UiMessageService
<h3>@L["CacheManagement"]</h3>
<link href="_content/Blazorise.TreeView/blazorise.treeview.css" rel="stylesheet"/>
<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <Row Class="justify-content-between">
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <span>@L["CacheGroupTree"]</span>

                    </Column>

                    <Column ColumnSize="ColumnSize.IsAuto">
                        @if (CanDelete)
                        {
                            <Button Color="Color.Primary" Size="Size.ExtraSmall" Clicked="CleanAllCacheAsync">
                                <Icon Name="IconName.Delete" Margin="Margin.Is1.FromEnd"></Icon>@L["CleanAll"]
                            </Button>
                        }

                    </Column>

                    @*  <Column ColumnSize="ColumnSize.IsAuto">
                        <Button Color="Color.Primary">
                            <Icon Name="IconName.Add" Margin="Margin.Is1.FromEnd"></Icon>@L["AddCache"]
                        </Button>
                    </Column>*@
                </Row>
            </CardHeader>
            <CardBody>
                <TreeView Nodes="Items"
                          GetChildNodes="@(item => item.Children)"
                          HasChildNodes="@(item => item.Children?.Any() == true)"
                          @bind-SelectedNode="selectedNode"
                          @onclick="() => OnSelectedNodeChangedAsync()"
                          @bind-ExpandedNodes="ExpandedNodes">
                    <NodeContent>@context.CacheName</NodeContent>
                </TreeView>


            </CardBody>
        </Card>
    </Column>

    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                @if (selectedNode.CacheName.IsNullOrWhiteSpace())
                {
                    <span>@L["AllProducts"]</span>
                }
                else
                {
                    <span>@selectedNode.CacheKey</span>
                }
            </CardHeader>
            <CardBody>
                <Form id="SearchForm" class="mb-3">
                    <Addons>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit Placeholder="@L["Filter"].Value" @bind-Text="@Filter.FilterText"/>
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <SubmitButton Form="SearchForm" Clicked="GetCacheItemsAsync">
                                <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                            </SubmitButton>
                        </Addon>
                    </Addons>
                </Form>


                <DataGrid TItem="CacheItemDataDto"
                          Data="CacheItemList"
                          ReadData="OnDataGridReadAsync"
                          TotalItems="TotalCount"
                          ShowPager="true"
                          ShowPageSizes="false"
                          PageSize="PageSize"
                          Responsive="true">
                    <DataGridColumns>

                        <DataGridEntityActionsColumn TItem="CacheItemDataDto">
                            <DisplayTemplate>
                                <EntityActions TItem="CacheItemDataDto" Type="ActionType.Button">
                                    <EntityAction TItem="CacheItemDataDto"
                                                  Clicked="() => OpenCacheItemChangeModal(context)"
                                                  Text="@L["ShowCache"]">
                                    </EntityAction>
                                </EntityActions>
                            </DisplayTemplate>
                        </DataGridEntityActionsColumn>

                        <DataGridColumn TItem="CacheItemDataDto"
                                        Field="CacheKey"
                                        Caption="@L["CacheKey"]">
                        </DataGridColumn>


                    </DataGridColumns>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>


@* ************************* SHOW MODAL ************************* *@
<Modal @ref="ShowCacheModal" Closing="@ShowCacheModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="ShowCacheModalForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseShowCacheModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>@L["CacheKey"]</FieldLabel>
                    <TextEdit @bind-Text="@EditCacheItemData.CacheKey"></TextEdit>
                </Field>

                <Field>
                    <FieldLabel>@L["CacheValue"]</FieldLabel>
                    <MemoEdit Rows="8" @bind-Text="@EditCacheItemData.CacheValue"></MemoEdit>
                </Field>


            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseShowCacheModalAsync">
                    @L["Cancel"]
                </Button>
                @if (CanDelete)
                {
                    <Button Color="Color.Danger"
                            Clicked="DeleteCacheAsync">
                        @L["Delete"]
                    </Button>
                }
                @if (CanEdit)
                {
                    <SubmitButton Form="ShowCacheModalForm" Clicked="UpdateCacheAsync"/>
                }

            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code {

    public class Item
    {
        public string Text { get; set; }
        public string Value { get; set; }
        public List<Item> Children { get; set; }
    }

    private GetCacheItemInput Filter { get; set; }

    private int PageSize { get; } = Volo.Abp.Application.Dtos.LimitedResultRequestDto.DefaultMaxResultCount;
    private int CurrentPage { get; set; } = 1;
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private IReadOnlyList<CacheItemDataDto> CacheItemList { get; set; }

    private IReadOnlyList<CacheItemDataDto> CacheGroupList { get; set; }
    private bool CanEdit { get; set; }
    private bool CanDelete { get; set; }
    List<CacheItemDto> Items { get; set; } = new List<CacheItemDto>();
    IList<CacheItemDto> ExpandedNodes = new List<CacheItemDto>();
    CacheItemDto selectedNode = new CacheItemDto();
    private Modal? ShowCacheModal { get; set; }

    private CacheItemDataDto EditCacheItemData { get; set; }

    public CacheManagement()
    {
        CacheGroupList = new List<CacheItemDataDto>();
        EditCacheItemData = new();
        Filter = new()
        {
            MaxResultCount = PageSize,
            SkipCount = (CurrentPage - 1) * PageSize,
            Sorting = CurrentSorting
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await SetPermissionsAsync();
        await GetCacheGroupsAsync();
    }

    private async Task GetCacheGroupsAsync()
    {
        Items = await CacheItemAppService.GetTreeAsync();
    }


    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<CacheItemDataDto> e)
    {
        //CurrentSorting = e.Columns
        //    .Where(c => c.SortDirection != SortDirection.Default)
        //    .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
        //    .JoinAsString(",");
        CurrentPage = e.Page;
        await GetCacheItemsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetPermissionsAsync()
    {
        CanEdit = await AuthorizationService
            .IsGrantedAsync(CacheManagementPermissions.CacheManagement.Edit);
        CanDelete = await AuthorizationService
            .IsGrantedAsync(CacheManagementPermissions.CacheManagement.Delete);
    }

    private async Task GetCacheItemsAsync()
    {
        Filter.MaxResultCount = PageSize;
        Filter.SkipCount = (CurrentPage - 1) * PageSize;
        Filter.Sorting = CurrentSorting;
        Filter.CacheName = "*";
        Filter.DisplayName = selectedNode.CacheKey;
        var result = await CacheItemAppService.GetListAsync(Filter);
        CacheItemList = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    private async Task OnSelectedNodeChangedAsync()
    {
        await GetCacheItemsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void OpenCacheItemChangeModal(CacheItemDataDto input)
    {
        EditCacheItemData = new()
        {
            CacheKey = input.CacheKey,
            CacheValue = (await CacheItemAppService.GetValueAsync(input.CacheKey)),
        };

        ShowCacheModal.Show();
    }

    private async Task CloseShowCacheModalAsync()
    {
        await ShowCacheModal.Hide();
    }

    private async Task UpdateCacheAsync()
    {
        try
        {
            await CacheItemAppService.UpdateAsync(new CacheItemUpdateDto()
            {
                CacheKey = EditCacheItemData.CacheKey,
                Value = EditCacheItemData.CacheValue
            });
            await GetCacheItemsAsync();
            await InvokeAsync(StateHasChanged);
            await CloseShowCacheModalAsync();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task CleanAllCacheAsync()
    {
        try
        {
            if (await UiMessageService.Confirm(L["AreYouSureToDelete"]))
            {
                await InvokeAsync(async () =>
                {
                    await CacheItemAppService.ClearAllAsync();
                    await GetCacheGroupsAsync();
                    await GetCacheItemsAsync();
                    await InvokeAsync(StateHasChanged);
                });
            }
           
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task DeleteCacheAsync()
    {
        try
        {
            if (await UiMessageService.Confirm(L["AreYouSureToDelete"]))
            {
                await InvokeAsync(async () =>
                {
                    await CacheItemAppService.DeleteAsync(EditCacheItemData.CacheKey);
                    await GetCacheItemsAsync();
                    await InvokeAsync(StateHasChanged);
                    await CloseShowCacheModalAsync();
                });
            }
        
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

}